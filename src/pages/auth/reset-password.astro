---
// DW - Auth - Reset password form

import Layout from "@/layouts/Layout.astro";
import { ensureCsrfToken } from "@/lib/csrf";
ensureCsrfToken(Astro.cookies);

const { url } = Astro;

// Check for token in different formats:
// 1. From query parameter (token)
// 2. From path segment (if URL contains /reset-password/{token})
let token = url.searchParams.get("token");
let error = url.searchParams.get("error");

// If no token in query params, check if it's in the path
if (!token && !error) {
  const pathParts = url.pathname.split('/');
  // Check if the URL format is like /auth/reset-password/{token}
  if (pathParts.length > 3 && pathParts[1] === 'auth' && pathParts[2] === 'reset-password') {
    token = pathParts[3];
  }
}

// If still no token and no error, redirect with error
if (!token && !error) {
  return Astro.redirect(
    "/auth/forgot-password?error=Invalid or expired reset link"
  );
}
---

<Layout title="Reset Password">
  <div class="flex flex-col items-center justify-center flex-1 p-4">
    <div
      data-reset-container
      class="w-full max-w-sm"
      role="region"
      aria-label="Password reset form"
    >
      {
        error && (
          <div
            class="mb-6 p-4 bg-red-100 border border-red-300 text-red-700 rounded-md text-center w-full max-w-sm"
            role="alert"
            aria-live="assertive"
          >
            <p class="font-semibold">
              {decodeURIComponent(error).charAt(0).toUpperCase() +
                decodeURIComponent(error).slice(1)}
            </p>
          </div>
        )
      }
      <h1 class="text-2xl font-bold mb-2 text-center">Reset Password</h1>
      <p class="mb-6 text-sm text-center" id="form-description">
        Enter your new password:
      </p>
      <form
        class="border border-gray-200 p-8 rounded-md mb-4"
        data-reset-form
        aria-describedby="form-description"
      >
        <input
          type="hidden"
          name="csrf"
          value={Astro.cookies.get("csrf")?.value}
        />
        <input 
          type="hidden" 
          name="token" 
          value={token || ""} 
        />
        <div class="flex flex-col mb-4">
          <label for="password" class="mb-2 text-sm font-semibold"
            >Password</label
          >
          <input
            type="password"
            name="password"
            id="password"
            required
            class="p-2 border border-gray-400 rounded-md mb-4"
          />
        </div>
        <button
          type="submit"
          data-reset-submit
          class="bg-black text-white p-3 text-sm font-semibold rounded-md hover:bg-gray-800 cursor-pointer w-full disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
          aria-busy="false"
        >
          <svg
            data-reset-spinner
            class="hidden w-5 h-5 mr-3 animate-spin"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"
              fill="none"></circle>
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          <span data-reset-text>Reset Password</span>
        </button>
      </form>
    </div>
  </div>
</Layout>

<script>
  const form = document.querySelector("[data-reset-form]") as HTMLFormElement;
  const submitButton = document.querySelector(
    "[data-reset-submit]"
  ) as HTMLButtonElement;
  const buttonText = document.querySelector(
    "[data-reset-text]"
  ) as HTMLSpanElement;
  const loadingSpinner = document.querySelector(
    "[data-reset-spinner]"
  ) as HTMLElement;

  form.addEventListener("submit", async (event: SubmitEvent) => {
    event.preventDefault();

    // Set loading state
    submitButton.disabled = true;
    submitButton.setAttribute("aria-busy", "true");
    buttonText.textContent = "Resetting password...";
    loadingSpinner.classList.remove("hidden");

    try {
      const formData = new FormData(event.target as HTMLFormElement);
      // Token is already in the hidden form field

      const response = await fetch("/api/auth/reset-password", {
        method: "POST",
        body: formData,
        headers: {
          Accept: "application/json",
        },
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || "Failed to reset password");
      }

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error);
      }

      // Redirect to login page on success
      window.location.href = `/login?success=${encodeURIComponent("Password reset successfully")}`;
    } catch (error: any) {
      console.error("Error:", error);
      window.location.href = `/auth/reset-password?error=${encodeURIComponent(error.message || "An unexpected error occurred")}`;
    } finally {
      // Reset loading state if there's an error
      submitButton.disabled = false;
      submitButton.setAttribute("aria-busy", "false");
    }
  });
</script>
