# PROJECT OVERVIEW

What we're building
- Public-facing web application with user authentication and content management
- User dashboard for managing personal data and preferences
- Admin portal for system management and content moderation
- Content management system for creating and organizing site content
- User management system for handling accounts, roles, and permissions
- API endpoints for programmatic access and third-party integrations

The Stack
- Astro (SSR w/ Node.js adapter)
- Tailwind CSS
- TypeScript
- Better-Auth for authentication
- MySQL (8.0) for database
- more libraries as needed, see ./package.json and ./src/layouts/Layout.astro for more specific libraries
- config files here: ./astro.config.mjs, ./tailwind.config.cjs, ./tsconfig.json

# TECHNICAL GUIDELINES

Development Partnership
- Leverage AI's strengths in logic, pattern recognition, and technical precision
- Proactively identify potential issues, especially regarding security and performance
- Provide expert guidance on architectural decisions and best practices
- Challenge potentially problematic approaches with data-driven alternatives
- Draw from deep knowledge of the tech stack to suggest optimal solutions
- Think critically about edge cases and long-term maintainability

Core Philosophy
- We build professional, maintainable solutions without unnecessary complexity
- We value code that is easy to understand and maintain over clever solutions
- We choose proven, stable patterns over bleeding-edge features
- We optimize for long-term maintainability and reliability
- We value pragmatic solutions using "old" and "boring" techniques
- Act like we're building a 100-year web service - we want solutions that will be around for a long time
- We keep business logic in the application layer, not in the database (avoiding MySQL functions/triggers)
- Our three highest priorities are:
  1. Security (never compromise on this)
  2. Performance (fast and efficient)
  3. Maintainability (clear, simple, documented)

Code Preservation and Modification
- Treat existing code with surgical precision - assume every line exists for a reason
- NEVER delete or replace existing functionality without explicit approval
- Existing complex implementations should be treated as critical infrastructure
- Make minimal, targeted changes instead of wholesale replacements
- If you don't fully understand a piece of code, DO NOT modify it
- Document and explain any proposed changes to existing code
- When modifying existing code:
  1. First understand the current implementation thoroughly
  2. Preserve all edge cases and special handling
  3. Make the smallest possible change to achieve the goal
  4. Test thoroughly to ensure no regressions
- Remember: Hours of careful development work may be embedded in existing code
- If unsure about a piece of code's purpose, ASK before modifying
- Default to additive changes rather than replacements
- Maintain backward compatibility unless explicitly told otherwise

Security First Development
- Security is not optional - it's a core requirement for every feature
- Be proactive in identifying potential security risks
- Never expose sensitive data (API keys, tokens, credentials) in client-side code
- Always validate and sanitize user input
- Use secure authentication patterns
- Keep sensitive operations server-side
- Question and flag any patterns that could create security vulnerabilities
- When in doubt, err on the side of security over convenience

JavaScript/TypeScript Best Practices
- Use TypeScript for all new code in Astro components and backend functionality
- Use JavaScript for all new code in related to frontend functionality (unless otherwise instructed)
- Prefer interfaces over types for better extensibility
- Follow standard file structure: exports -> subcomponents -> helpers -> types
- Use clear, descriptive variable and function names
- Variable declarations:
  - Use `const` sparingly (only for variables that are not reassigned, and definitely NOT in loops)
  - Use `let` for variables that will be reassigned
  - Use `var` only for global variables that need to be accessible outside the function
- Write pure functions using the "function" keyword
- Keep functions focused and reasonably sized
- Add type annotations that help with understanding, not just for type safety

Tailwind CSS Best Practices
- Use Tailwind utility classes extensively in your Astro components
- Leverage Tailwind's responsive design utilities (sm:, md:, lg:, etc.)
- Utilize Tailwind's color palette and spacing scale for consistency
- Implement custom theme extensions in tailwind.config.cjs when necessary
- Never use the @apply directive

# ASTRO GUIDELINES

Key Principles
- Follow Astro's Style Guide for consistent code formatting
- Take advantage of Astro's "islands" architecture when possible
- Leverage Astro's partial hydration and multi-framework support effectively
- Implement proper error handling and logging
- Use TypeScript for enhanced type safety and developer experience
- Prioritize static generation and minimal JavaScript for optimal performance
- Use descriptive variable names and follow Astro's naming conventions
- Organize files using Astro's file-based routing system

Code Quality Principles
- Write code that is easy to understand and debug
- Avoid premature optimization
- Don't add abstractions until they're clearly needed
- Keep solutions as simple as possible while meeting requirements
- Comment complex logic, but let clear code speak for itself
- Write tests for critical business logic
- When debugging persistent issues, start with the simplest explanations first
  - Check for basic oversights before diving into complex solutions
  - Consider that errors may manifest in different places than their root cause
  - Avoid hasty assumptions that could lead to unnecessary complexity
  - Step back and reevaluate if multiple solution attempts aren't working

Architecture Guidelines
- Start with the simplest solution that fully solves the problem
- Add complexity only when there's a clear benefit
- Choose boring/proven solutions over exciting/new ones
- Consider future maintenance when making architectural decisions
- Build features that scale predictably under load
- Plan for graceful degradation

Performance
- Focus on real user metrics over micro-optimizations
- Optimize the critical rendering path
- Minimize JavaScript bundle size
- Use appropriate caching strategies
- Load assets efficiently
- Monitor and respond to performance regressions

Security
- Follow security best practices by default
- Validate all user input
- Use proper authentication and authorization
- Keep dependencies updated
- Handle errors appropriately
- Log security-relevant events

Accessibility
- Build with accessibility in mind from the start
- Use semantic HTML
- Ensure keyboard navigation works
- Add appropriate ARIA attributes
- Test with screen readers
- Support users with different needs

Development Process
- Write clear commit messages
- Review code thoroughly
- Document important decisions
- Keep the codebase clean
- Fix bugs before adding features
- Maintain consistent code style

Remember:
- Complex solutions often introduce more problems than they solve
- If something seems unnecessarily complicated, it probably is
- When in doubt, choose the simpler option
- Technical debt comes from both over-engineering and under-engineering 